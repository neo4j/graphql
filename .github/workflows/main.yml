# This is a basic workflow to help you get started with Actions

name: "@neo4j/graphql CI"

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    strategy:
      matrix:
        node-version: [lts/*]
        
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - run: yarn --immutable
      - run: yarn build
      - name: Run @neo4j/graphql unit tests
        run: yarn --cwd packages/graphql run test:unit
      - name: Run @neo4j/graphql TCK tests
        run: yarn --cwd packages/graphql run test:tck
      - name: Run @neo4j/graphql package tests
        run: yarn --cwd packages/graphql run test:package-tests
      - name: Run @neo4j/graphql-ogm unit tests
        run: yarn --cwd packages/ogm run test:unit
        
  integration-test:

    strategy:
      matrix:
        node-version: [lts/*]
        neo4j-version: [4.1.5, 4.1, 4.2, 4.3]
        
    runs-on: ubuntu-latest
    
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      neo4j:
        # Docker Hub image
        image: neo4j:${{ matrix.neo4j-version }}
        # Provide the password for postgres
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4JLABS_PLUGINS: "[\"apoc\"]"
        ports:
          # Maps tcp port 5432 on service container to the host
          - 7687:7687
        
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - run: yarn --immutable
      - run: yarn build
      - name: Run @neo4j/graphql integration tests
        run: yarn --cwd packages/graphql run test:int
        # Environment variables used by the `client.js` script to create
        # a new PostgreSQL table.
        env:
          NEO_USER: neo4j
          NEO_PASSWORD: testpassword
          NEO_URL: bolt://localhost:7687
          
  aura-test:

    strategy:
      matrix:
        node-version: [lts/*]
        aura-instance: [FREE, PROFESSIONAL]
        
    runs-on: ubuntu-latest
    
    env:
      AURA_URI_SECRET: AURA_${{ matrix.aura-instance }}_URI
      AURA_PASSWORD_SECRET: AURA_${{ matrix.aura-instance }}_PASSWORD
        
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - run: yarn --immutable
      - run: yarn build
      - name: Run @neo4j/graphql integration tests
        run: yarn --cwd packages/graphql run test:int -t '^(?!delete should delete a movie, a single nested actor and another movie they act in|update should delete a nested actor and one of their nested movies, within an update block)'
        # Environment variables used by the `client.js` script to create
        # a new PostgreSQL table.
        env:
          NEO_USER: neo4j
          NEO_PASSWORD: ${{ secrets[env.AURA_PASSWORD_SECRET] }}
          NEO_URL: ${{ secrets[env.AURA_URI_SECRET] }}
