name: "Next.js app setup and tests"

on:
  workflow_call:

jobs:
  nextjs-app-setup:
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:latest
        env:
          NEO4J_AUTH: neo4j/mypassword
          NEO4JLABS_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687

    strategy:
      matrix:
        graphql-version:
          - "^15.0.0"
          - "^16.0.0"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: yarn
      - name: Install dependencies
        run: yarn --immutable
      - name: Build and pack @neo4j/graphql
        run: |
          yarn build
          yarn pack
        working-directory: packages/graphql
      - name: Setup Nextjs app
        run: chmod +x docs/modules/ROOT/examples/code-partials/nextjs/create-app.sh && cd packages && ../docs/modules/ROOT/examples/code-partials/nextjs/create-app.sh
      - name: Install dependencies
        run: |
          chmod +x ../../docs/modules/ROOT/examples/code-partials/nextjs/add-dependencies.sh && ../../docs/modules/ROOT/examples/code-partials/nextjs/add-dependencies.sh
          npm install ../graphql/package.tgz
          npm install graphql@${{ matrix.graphql-version }}
        working-directory: packages/neo4j-graphql-nextjs
      - name: Copy .env file
        run: cp docs/modules/ROOT/examples/code-partials/nextjs/env.example packages/neo4j-graphql-nextjs/.env.local
      - name: Create GraphQL endpoint
        run: cp docs/modules/ROOT/examples/code-partials/nextjs/graphql.js packages/neo4j-graphql-nextjs/pages/api/graphql.js
      - name: Start server
        run: cd packages/neo4j-graphql-nextjs && yarn dev &
      - name: Query the API and assert that there are no errors
        run: |
          sleep 10 &&
          RES=$(curl 'http://localhost:3000/api/graphql' -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Origin: http://localhost:3000' --data-binary '{"query":"{\n  movies {\n    title\n  }\n}"}' --compressed --silent)
          echo "$RES"
          echo "$RES" | grep -qv "error"
