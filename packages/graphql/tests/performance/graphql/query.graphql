query SimpleQuery {
    movies {
        title
        actors {
            name
        }
    }
}

# https://github.com/neo4j/graphql/issues/187
query QueryWhere {
    movies(where: { actors: { name: "Keanu Reeves" } }) {
        released
    }
}

query SimpleQueryWithNestedWhere {
    movies(where: { actors_SOME: { name: "Keanu Reeves" } }) {
        title
        actors {
            name
        }
    }
}

query DeeplyNested_skip {
    movies {
        actors {
            name
            movies {
                title
                actors {
                    name
                    movies {
                        title
                        actors {
                            name
                        }
                        directors {
                            name
                        }
                    }
                }
            }
        }
    }
}

query Nested {
    movies {
        actors {
            name
            movies {
                title
                actors {
                    name
                }
            }
        }
    }
}

query NestedWithFilter {
    movies {
        actors(where: { born_GT: 1000 }) {
            name
            movies(where: { title_CONTAINS: "Shark" }) {
                title
                actors {
                    name
                }
            }
        }
    }
}

query OrFilterOnRelationships {
    movies(
        where: {
            OR: [
                { actors_SOME: { born: 1997 } }
                { actors_SOME: { born: 1998 } }
                { actors_SOME: { born: 1999 } }
                { actors_SOME: { born: 1956 } }
                { actors_SOME: { born: 1975 } }
                { actors_SOME: { born: 1976 } }
            ]
        }
    ) {
        title
        actors {
            name
            born
        }
    }
}

query OrFilterOnRelationshipsAndNested {
    movies(
        where: {
            OR: [
                { actors_SOME: { born: 1997 } }
                { actors_SOME: { born: 1998 } }
                { actors_SOME: { born: 1956 } }
                { directors: { movies: { title: "Matrix" } } }
                { directors: { movies: { title: "foo" } } }
                { directors: { movies: { title: "bar" } } }
            ]
        }
    ) {
        title
        actors {
            name
            born
        }
    }
}

query QueryWithNestedIn {
    movies(where: { actors_SOME: { born_IN: [1997, 1998, 1999, 1956, 1975, 1976] } }) {
        title
        actors {
            name
            born
        }
    }
}

# From https://github.com/neo4j/graphql/issues/1262
query NestedConnectionWhere {
    movies(
        where: {
            actorsConnection_SOME: { node: { name: "Hugo Weaving", moviesConnection_NONE: { node: { title: "No" } } } }
        }
    ) {
        title
    }
}

query DeeplyNestedConnectionWhere {
    movies(
        where: {
            actorsConnection_SOME: {
                node: {
                    name: "Hugo Weaving"
                    moviesConnection_NONE: {
                        node: { title: "The Matrix", directorsConnection_SOME: { node: { name_CONTAINS: "Lana" } } }
                    }
                }
            }
        }
    ) {
        title
    }
}

query DeeplyNestedWithRelationshipFilters {
    people(
        where: {
            name_STARTS_WITH: "T"
            movies_SOME: {
                title_CONTAINS: "i"
                actors_SOME: {
                    name_CONTAINS: "i"
                    movies_SOME: {
                        title_NOT: "non-existant"
                        actors_SOME: { name_CONTAINS: "i", movies_NONE: { title: "The Matrix" } }
                    }
                }
            }
        }
    ) {
        name
    }
}

query NestedWithRelationshipSingleFilters {
    people(
        where: { name_STARTS_WITH: "T", movies_SINGLE: { title_CONTAINS: "i", actors_SINGLE: { name_CONTAINS: "i" } } }
    ) {
        name
    }
}

# Skipped due to cypher bug causing poor performance of deeply nested SINGLE filters on Neo4j 5
query DeeplyNestedWithRelationshipSingleFilters_skip {
    people(
        where: {
            name_STARTS_WITH: "T"
            movies_SINGLE: {
                title_CONTAINS: "i"
                actors_SINGLE: {
                    name_CONTAINS: "i"
                    movies_SINGLE: {
                        title_NOT: "non-existant"
                        actors_SINGLE: { name_CONTAINS: "i", movies_SINGLE: { title: "The Matrix" } }
                    }
                }
            }
        }
    ) {
        name
    }
}

query Fulltext {
    movieTaglineFulltextQuery(phrase: "the real world") {
        movie {
            title
            tagline
        }
        score
    }
}

query FulltextWithNestedQuery {
    movieTaglineFulltextQuery(phrase: "the real world") {
        movie {
            title
            tagline
            actors {
                name
            }
        }
        score
    }
}
